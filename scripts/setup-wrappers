#!/bin/zsh
# bash compatible though

# The environment tmux server is running in is not within TMUX so it is best we set this flag (used in keys.sh) regardless
if [[ -z $_TMUX_ESCAPE_NAV_ENABLED ]]; then
  export _TMUX_ESCAPE_NAV_ENABLED=1
fi
if [[ $_TMUX_ESCAPE_NAV_ENABLED = 1 && -z $_TMUX_ESCAPE_NAV_SETUP ]]; then
  __configure_tmux_wrappers() {
    # Allow user to specify TMUX_ESCAPED_PROGRAMS as a *space-separated* list (so that it can be portably read in keys.sh as well)
    if [[ -z ${TMUX_ESCAPED_PROGRAMS+x} ]]; then
      export TMUX_ESCAPED_PROGRAMS="fzf nvim"
    fi
    if [[ -z $TMUX_ESCAPED_PROGRAMS ]]; then
      return 0;
    fi

    local script_dir
    if (( ${#BASH_SOURCE[@]} > 1 )); then
      # If the script is sourced (Bash): BASH_SOURCE will have more than 1 element
      script_dir=$(dirname "${BASH_SOURCE[0]}")
    elif [[ -n "$ZSH_VERSION" ]]; then
      # If it's Zsh, no idea how this works but chatgpt said so
      script_dir=$(dirname "${(%):-%x}")
    else
      return 1
    fi

    local src_dir="$(realpath $script_dir/../escape-nav)"
    local out_dir="$src_dir/bin"

    local tmux_path=$(which -p tmux 2>/dev/null)
    if [[ ! -x "$tmux_path" ]]; then
      >&2 echo "Failed to find _TMUX_REAL_PATH, cannot create wrappers"; return 1
    fi
    export _TMUX_REAL_PATH="$tmux_path"

    local do_source=source
    if command -v source_compile >/dev/null 2>&1; then
      do_source=source_compile
    fi

    for cmd_name in $(echo $TMUX_ESCAPED_PROGRAMS); do
      if [[ ! -f "$out_dir/$cmd_name" ]]; then
        >&2 echo "Compiling tmux wrapper for $cmd_name..."
        SRC_DIR="$src_dir" OUT_DIR="$out_dir" "$do_source" "$script_dir/make-tmux-escaped-binary" "$cmd_name" || return 1
      fi
      local cmd_path=$(which -p "$cmd_name" 2>/dev/null)
      if [[ ! -x "$cmd_path" ]]; then
        >&2 echo "Failed to find real path for $cmd_name, cannot create wrapper"
        continue
      fi
      if [[ -n "$cmd_path" ]]; then
        local upper_cmd_name=$(printf "%s" "$cmd_name" | tr '[:lower:]' '[:upper:]')
        export "_${upper_cmd_name}_REAL_PATH=$cmd_path"
      fi
    done

    # If user has changed TMUX_ESCAPED_PROGRAMS we should clean up because they are still on the path
    local f
    local valid_program_pattern=$(echo $TMUX_ESCAPED_PROGRAMS | xargs | tr -s '[:space:]' '|')
    valid_program_pattern="^(${valid_program_pattern%?})$"
    for f in $(ls "$out_dir"); do
      if [[ ! "$f" =~ "$valid_program_pattern" ]]; then
        rm "$out_dir/$f" 2>/dev/null
      fi
    done
    export _TMUX_ESCAPE_NAV_BIN="$out_dir"
    export _TMUX_ESCAPE_NAV_SETUP=1
  }
  __configure_tmux_wrappers || >&2 echo "Failed to setup tmux program wrappers"
fi
# Actually add to path if in TMUX
if [[ -n "$TMUX" && -d "$_TMUX_ESCAPE_NAV_BIN" && "$_TMUX_ESCAPE_NAV_SETUP" = 1 ]]; then
  export PATH="$_TMUX_ESCAPE_NAV_BIN:$PATH"
fi
